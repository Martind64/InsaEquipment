<?php

namespace AppBundle\Entity\Repository;
use Doctrine\ORM\Query\AST\Functions\CurrentDateFunction;
use Symfony\Component\Validator\Constraints\DateTime;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\Validator\Constraints\Date;

/**
 * CalibrationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EquipmentRepository extends \Doctrine\ORM\EntityRepository
{

        public function findAllEquipment()
        {
            return $this->findBy(array(), ['equipmentID' => 'ASC']);
        }

        public function findEquipmentJoinedWithTypes($id)
        {

            $query = $this->getEntityManager()
                ->createQuery('SELECT c from AppBundle:Classification c
                               JOIN c.equipment e
                               where e.id = :id')->setParameter('id', $id);

            return $query->getResult();

        }

        public function getUpcomingCalibrations()
        {
            $date_from = new \DateTime();
            $date_to = new \DateTime();
            $date_to->modify('+60 day');

            $qb = $this->getEntityManager()
                ->createQueryBuilder();

            $query = $qb->select('e')
                ->from('AppBundle:Equipment', 'e')
                ->where('e.nextCalibration >= :date_from')
                ->andWhere($qb->expr()->between('e.nextCalibration', ':date_from', ':date_to'))
//            ->andWhere('e.nextCalibration <= :date_to')
                ->setParameter('date_from', $date_from, \Doctrine\DBAL\Types\Type::DATETIME)
                ->setParameter('date_to', $date_to,\Doctrine\DBAL\Types\Type::DATETIME)
                ->getQuery();

            return $query->getResult();
        }

    public function getdates()
    {

//
    }




}
